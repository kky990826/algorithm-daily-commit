#유형별 문제 풀이 - 스택과 큐
# 스택과 큐 정리
"""
파이썬에서 스택을 구현할때 기본적으로 list 기반이다.
LIFO의 자료구조기 때문에 모두 리스트의 끝 부분에서 일어남
파이썬 리스트는 끝 부분에서의 append/pop은 O(1)의 성능을 보장한다.

반면 링크드 리스트를 기반으로 스택을 구현하면 리스트 기반으로 만들때보다 성능면에서 비효율적
직접 노드 객체를 생성하고 관리해야하는데 굳이 이럴 필요가 없기 때문
또한 자바처럼 정교한 JIT 최적화가 없기 때문에 배열 기반으로 만드는 것이 훨씬 빠르다


반면 큐를 구현하고자 할때는 링크드 리스트 기반으로 사용한다.
큐 자료구조의 주요 연산은 enqueue와 dequeue, FIFO의 자료구조다.
이걸 배열 기반으로 만들게 되면 pop을 하는 순간 모든 요소를 한 칸씩 앞으로 이동해야 함, O(N)의 성능
그래서 링크드 리스트 기반으로 만들게 되면 앞/뒤 삽입/삭제 모두 O(1)으로 해결 가능
(물론 파이썬 라이브러리에서 제공하는 deque는 배열 기반이다. deque는 고정 크기 블록의 링 형태로 연결한 구조,
앞/뒤/삽입/삭제/ 모두 O(1)으로 해결했다.)

*자바는 큐와 스택 모두 Array 기반의 ArrayDeque를 사용*
왜 큐를 링크드 리스트 기반이 아닌 Array 기반으로 하는가?

자바의 ArrayDequeue는 원형 배열 구조이다. 파이썬 링 버퍼와 똑같은 원리,
일반 배열로 큐를 만들면 앞에서 삭제할 때 O(N)이지만
ArrayDequeue는 원형 큐 구조로 만들어져 있어 addLast(), removeFirst() 둘다 O(1)의 성능
그래서 굳이 노드를 만들어서 value, prev, next 3개의 필드로 메모리 낭비할 필요가 없음

=> 파이썬과 자바 모두 실제 최적화된 라이브러리를 이용해서 큐를 다룰때 내부적으로 링 버퍼 구조의 리스트로 구현!
스택은 파이썬은 리스트 이용, 자바는 ArrayDequeue 사용
"""