#유형별 문제 풀이 - 완전 탐색
"""
완전 탐색 (Brute Force)
**완전 탐색**이란 가능한 모든 경우의 수를 전부 시도하여 정답을 찾는 방식이다.

효율적으로 원하는 대상을 찾는 **탐색 알고리즘**과는 차이가 있다.
탐색 알고리즘은 **선형 탐색**, **이진 탐색**, **비선형 탐색(DFS, BFS)** 등
조건을 만족하는 대상을 **빠르게 찾기 위한 전략**이다.

반면, 완전 탐색은 정답이 될 가능성이 있는 **모든 후보를 체계적으로** 확인한다.
이를 위해 **반복문**, **재귀 호출**, **비트마스크**, **순열/조합 생성** 등의 기법이 사용된다.

하나하나 모든 경우를 확인하기 때문에 **정답이 반드시 보장**된다는 장점이 있다.
그리고 그 과정에서 **DFS, BFS와 같은 탐색 알고리즘이 사용될 수 있다.**

백트래킹 : solution이 될 가능성이 없는 후보는 더 이상 탐색하지 않고 후보를 포기하면서 탐색
백트래킹이나 다이나믹 프로그래밍을 이용해서 완전 탐색을 최적화 할 수 있음


1. 완전 탐색의 본질
완전 탐색은 가능한 모든 경우의 수를 전부 시도해서 정답을 찾는 방식이다.
말로는 단순하지만, 실제 구현하려면 경우의 수가 많기 때문에 체계적인 방법이 필요하다.

2. for문 vs 재귀
완전 탐색을 for문만으로 구현하면 결국 "for문을 계속 돌리는" 식이 된다.
예: 3중, 4중, 5중 for문…
이걸 좀 더 유연하고 깔끔하게 구현하는 방법이 재귀이다.
특히 상태를 저장하고, 다음 단계로 들어갔다가 복귀해야 하는 구조일 때 필수.

3. 백트래킹의 위치
완전 탐색에서 불필요한 경우를 제거하는 최적화 방법이 백트래킹이다.
조건을 체크하고 가지치기하는 로직이 들어감.
이 백트래킹도 거의 항상 재귀로 구현된다.
선택 → 재귀 호출 → 되돌리기 (append → call → pop)

4. DP(동적 계획법)도 최적화 방법 중 하나
완전 탐색은 모든 경우를 보면서도 같은 계산을 여러 번 반복하는 문제가 있다.
이때는 백트래킹 대신 DP를 써서 중복 계산을 줄이는 것이 더 효율적일 수 있다.

> 완전 탐색을 구현할 때,
> 반복문으로 할지 재귀로 할지를 먼저 결정하고,
> **최적화를 위해 백트래킹(불필요한 완전탐색?)이나 DP(중복제거?)를 적용할지를 판단하는 것**이 실전 문제 풀이의 핵심이다.
"""
