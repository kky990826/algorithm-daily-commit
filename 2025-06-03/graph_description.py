#유형별 문제 풀이 - 그래프
# 인접 행렬 구현하기
graph = [
    [0, 0, 1, 0, 1],
    [0, 0, 0, 1, 1],
    [1, 0, 0, 0, 1],
    [0, 1, 0, 0, 1],
    [1, 1, 1, 1, 0],
]

"""
대각선이 모두 0(자기 자신은 연결이 안되기 때문), 
대각선을 중심으로 좌우 대칭 형태(무방향 그래프에서는 graph[i][j] == graph[j][i] 조건이 반드시 성립)
"""

"""
인접 행렬은 vertex는 많이 있는데 그에 비해 간선은 별로 없음, 있지도 않은 간선을 표현하느라 0을 많이 사용 
=> 인접 리스트를 사용
"""

# 인접 리스트 구현하기
graph2 = {
    1: [3 ,5],
    2: [4, 5],
    3: [1, 5],
    4: [2, 5],
    5: [1, 2, 3,4],
}

# 암시적 그래프 구현하기
# 인접 노드를 계산식으로 정의해야 하므로 그래프의 패턴이나 규칙을 찾아야 함
# 그래프를 저장하지 않고 이웃 노드를 함수로 정의한다
def get_neighbors(node):
    if node == 1:
        return [3, 5]
    elif node == 2:
        return [4, 5]
    elif node == 3:
        return [1, 5]
    elif node == 4:
        return [2, 5]
    elif node == 5:
        return [1, 2, 3, 4]
    return []

